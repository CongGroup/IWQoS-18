/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef TMiddleBoxService_H
#define TMiddleBoxService_H

#include <thrift/TDispatchProcessor.h>
#include "MiddleboxServer_types.h"

namespace MiddleBoxServer {

class TMiddleBoxServiceIf {
 public:
  virtual ~TMiddleBoxServiceIf() {}

  /**
   * TestHeader API
   * @return Value as Binary
   * 
   * @param Token
   * @param SetBit
   * @param SetState
   */
  virtual void TestHeader(std::string& _return, const std::string& Token, const bool SetBit, const bool SetState) = 0;
};

class TMiddleBoxServiceIfFactory {
 public:
  typedef TMiddleBoxServiceIf Handler;

  virtual ~TMiddleBoxServiceIfFactory() {}

  virtual TMiddleBoxServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(TMiddleBoxServiceIf* /* handler */) = 0;
};

class TMiddleBoxServiceIfSingletonFactory : virtual public TMiddleBoxServiceIfFactory {
 public:
  TMiddleBoxServiceIfSingletonFactory(const boost::shared_ptr<TMiddleBoxServiceIf>& iface) : iface_(iface) {}
  virtual ~TMiddleBoxServiceIfSingletonFactory() {}

  virtual TMiddleBoxServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(TMiddleBoxServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<TMiddleBoxServiceIf> iface_;
};

class TMiddleBoxServiceNull : virtual public TMiddleBoxServiceIf {
 public:
  virtual ~TMiddleBoxServiceNull() {}
  void TestHeader(std::string& /* _return */, const std::string& /* Token */, const bool /* SetBit */, const bool /* SetState */) {
    return;
  }
};


class TMiddleBoxService_TestHeader_args {
 public:

  static const char* ascii_fingerprint; // = "B8E1E91B0E4D1772237E387EEB23B1B0";
  static const uint8_t binary_fingerprint[16]; // = {0xB8,0xE1,0xE9,0x1B,0x0E,0x4D,0x17,0x72,0x23,0x7E,0x38,0x7E,0xEB,0x23,0xB1,0xB0};

  TMiddleBoxService_TestHeader_args(const TMiddleBoxService_TestHeader_args&);
  TMiddleBoxService_TestHeader_args& operator=(const TMiddleBoxService_TestHeader_args&);
  TMiddleBoxService_TestHeader_args() : Token(), SetBit(0), SetState(0) {
  }

  virtual ~TMiddleBoxService_TestHeader_args() throw();
  std::string Token;
  bool SetBit;
  bool SetState;

  void __set_Token(const std::string& val);

  void __set_SetBit(const bool val);

  void __set_SetState(const bool val);

  bool operator == (const TMiddleBoxService_TestHeader_args & rhs) const
  {
    if (!(Token == rhs.Token))
      return false;
    if (!(SetBit == rhs.SetBit))
      return false;
    if (!(SetState == rhs.SetState))
      return false;
    return true;
  }
  bool operator != (const TMiddleBoxService_TestHeader_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TMiddleBoxService_TestHeader_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const TMiddleBoxService_TestHeader_args& obj);
};


class TMiddleBoxService_TestHeader_pargs {
 public:

  static const char* ascii_fingerprint; // = "B8E1E91B0E4D1772237E387EEB23B1B0";
  static const uint8_t binary_fingerprint[16]; // = {0xB8,0xE1,0xE9,0x1B,0x0E,0x4D,0x17,0x72,0x23,0x7E,0x38,0x7E,0xEB,0x23,0xB1,0xB0};


  virtual ~TMiddleBoxService_TestHeader_pargs() throw();
  const std::string* Token;
  const bool* SetBit;
  const bool* SetState;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const TMiddleBoxService_TestHeader_pargs& obj);
};

typedef struct _TMiddleBoxService_TestHeader_result__isset {
  _TMiddleBoxService_TestHeader_result__isset() : success(false) {}
  bool success :1;
} _TMiddleBoxService_TestHeader_result__isset;

class TMiddleBoxService_TestHeader_result {
 public:

  static const char* ascii_fingerprint; // = "9A73381FEFD6B67F432E717102246330";
  static const uint8_t binary_fingerprint[16]; // = {0x9A,0x73,0x38,0x1F,0xEF,0xD6,0xB6,0x7F,0x43,0x2E,0x71,0x71,0x02,0x24,0x63,0x30};

  TMiddleBoxService_TestHeader_result(const TMiddleBoxService_TestHeader_result&);
  TMiddleBoxService_TestHeader_result& operator=(const TMiddleBoxService_TestHeader_result&);
  TMiddleBoxService_TestHeader_result() : success() {
  }

  virtual ~TMiddleBoxService_TestHeader_result() throw();
  std::string success;

  _TMiddleBoxService_TestHeader_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const TMiddleBoxService_TestHeader_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TMiddleBoxService_TestHeader_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TMiddleBoxService_TestHeader_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const TMiddleBoxService_TestHeader_result& obj);
};

typedef struct _TMiddleBoxService_TestHeader_presult__isset {
  _TMiddleBoxService_TestHeader_presult__isset() : success(false) {}
  bool success :1;
} _TMiddleBoxService_TestHeader_presult__isset;

class TMiddleBoxService_TestHeader_presult {
 public:

  static const char* ascii_fingerprint; // = "9A73381FEFD6B67F432E717102246330";
  static const uint8_t binary_fingerprint[16]; // = {0x9A,0x73,0x38,0x1F,0xEF,0xD6,0xB6,0x7F,0x43,0x2E,0x71,0x71,0x02,0x24,0x63,0x30};


  virtual ~TMiddleBoxService_TestHeader_presult() throw();
  std::string* success;

  _TMiddleBoxService_TestHeader_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const TMiddleBoxService_TestHeader_presult& obj);
};

class TMiddleBoxServiceClient : virtual public TMiddleBoxServiceIf {
 public:
  TMiddleBoxServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  TMiddleBoxServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void TestHeader(std::string& _return, const std::string& Token, const bool SetBit, const bool SetState);
  void send_TestHeader(const std::string& Token, const bool SetBit, const bool SetState);
  void recv_TestHeader(std::string& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class TMiddleBoxServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<TMiddleBoxServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (TMiddleBoxServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_TestHeader(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  TMiddleBoxServiceProcessor(boost::shared_ptr<TMiddleBoxServiceIf> iface) :
    iface_(iface) {
    processMap_["TestHeader"] = &TMiddleBoxServiceProcessor::process_TestHeader;
  }

  virtual ~TMiddleBoxServiceProcessor() {}
};

class TMiddleBoxServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  TMiddleBoxServiceProcessorFactory(const ::boost::shared_ptr< TMiddleBoxServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< TMiddleBoxServiceIfFactory > handlerFactory_;
};

class TMiddleBoxServiceMultiface : virtual public TMiddleBoxServiceIf {
 public:
  TMiddleBoxServiceMultiface(std::vector<boost::shared_ptr<TMiddleBoxServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~TMiddleBoxServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<TMiddleBoxServiceIf> > ifaces_;
  TMiddleBoxServiceMultiface() {}
  void add(boost::shared_ptr<TMiddleBoxServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void TestHeader(std::string& _return, const std::string& Token, const bool SetBit, const bool SetState) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->TestHeader(_return, Token, SetBit, SetState);
    }
    ifaces_[i]->TestHeader(_return, Token, SetBit, SetState);
    return;
  }

};

} // namespace

#endif
