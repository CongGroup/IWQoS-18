/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "TMiddleBoxService.h"

namespace MiddleBoxServer {


TMiddleBoxService_TestHeader_args::~TMiddleBoxService_TestHeader_args() throw() {
}


uint32_t TMiddleBoxService_TestHeader_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_Token = false;
  bool isset_SetBit = false;
  bool isset_SetState = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->Token);
          isset_Token = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->SetBit);
          isset_SetBit = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->SetState);
          isset_SetState = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_Token)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_SetBit)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_SetState)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t TMiddleBoxService_TestHeader_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("TMiddleBoxService_TestHeader_args");

  xfer += oprot->writeFieldBegin("Token", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeBinary(this->Token);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("SetBit", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->SetBit);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("SetState", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->SetState);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


TMiddleBoxService_TestHeader_pargs::~TMiddleBoxService_TestHeader_pargs() throw() {
}


uint32_t TMiddleBoxService_TestHeader_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("TMiddleBoxService_TestHeader_pargs");

  xfer += oprot->writeFieldBegin("Token", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeBinary((*(this->Token)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("SetBit", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool((*(this->SetBit)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("SetState", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool((*(this->SetState)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


TMiddleBoxService_TestHeader_result::~TMiddleBoxService_TestHeader_result() throw() {
}


uint32_t TMiddleBoxService_TestHeader_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TMiddleBoxService_TestHeader_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("TMiddleBoxService_TestHeader_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_STRING, 0);
    xfer += oprot->writeBinary(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


TMiddleBoxService_TestHeader_presult::~TMiddleBoxService_TestHeader_presult() throw() {
}


uint32_t TMiddleBoxService_TestHeader_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

void TMiddleBoxServiceClient::TestHeader(std::string& _return, const std::string& Token, const bool SetBit, const bool SetState)
{
  send_TestHeader(Token, SetBit, SetState);
  recv_TestHeader(_return);
}

void TMiddleBoxServiceClient::send_TestHeader(const std::string& Token, const bool SetBit, const bool SetState)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("TestHeader", ::apache::thrift::protocol::T_CALL, cseqid);

  TMiddleBoxService_TestHeader_pargs args;
  args.Token = &Token;
  args.SetBit = &SetBit;
  args.SetState = &SetState;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void TMiddleBoxServiceClient::recv_TestHeader(std::string& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("TestHeader") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  TMiddleBoxService_TestHeader_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "TestHeader failed: unknown result");
}

bool TMiddleBoxServiceProcessor::dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext) {
  ProcessMap::iterator pfn;
  pfn = processMap_.find(fname);
  if (pfn == processMap_.end()) {
    iprot->skip(::apache::thrift::protocol::T_STRUCT);
    iprot->readMessageEnd();
    iprot->getTransport()->readEnd();
    ::apache::thrift::TApplicationException x(::apache::thrift::TApplicationException::UNKNOWN_METHOD, "Invalid method name: '"+fname+"'");
    oprot->writeMessageBegin(fname, ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return true;
  }
  (this->*(pfn->second))(seqid, iprot, oprot, callContext);
  return true;
}

void TMiddleBoxServiceProcessor::process_TestHeader(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("TMiddleBoxService.TestHeader", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "TMiddleBoxService.TestHeader");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "TMiddleBoxService.TestHeader");
  }

  TMiddleBoxService_TestHeader_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "TMiddleBoxService.TestHeader", bytes);
  }

  TMiddleBoxService_TestHeader_result result;
  try {
    iface_->TestHeader(result.success, args.Token, args.SetBit, args.SetState);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "TMiddleBoxService.TestHeader");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("TestHeader", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "TMiddleBoxService.TestHeader");
  }

  oprot->writeMessageBegin("TestHeader", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "TMiddleBoxService.TestHeader", bytes);
  }
}

::boost::shared_ptr< ::apache::thrift::TProcessor > TMiddleBoxServiceProcessorFactory::getProcessor(const ::apache::thrift::TConnectionInfo& connInfo) {
  ::apache::thrift::ReleaseHandler< TMiddleBoxServiceIfFactory > cleanup(handlerFactory_);
  ::boost::shared_ptr< TMiddleBoxServiceIf > handler(handlerFactory_->getHandler(connInfo), cleanup);
  ::boost::shared_ptr< ::apache::thrift::TProcessor > processor(new TMiddleBoxServiceProcessor(handler));
  return processor;
}
} // namespace

