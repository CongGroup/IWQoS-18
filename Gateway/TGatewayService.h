/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef TGatewayService_H
#define TGatewayService_H

#include <thrift/TDispatchProcessor.h>
#include "GatewayServer_types.h"

namespace GatewayServer {

class TGatewayServiceIf {
 public:
  virtual ~TGatewayServiceIf() {}

  /**
   * Increase the Counter API
   * @return Value as Binary
   * 
   * @param RuleID
   */
  virtual void IncCounter(const std::string& RuleID) = 0;
};

class TGatewayServiceIfFactory {
 public:
  typedef TGatewayServiceIf Handler;

  virtual ~TGatewayServiceIfFactory() {}

  virtual TGatewayServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(TGatewayServiceIf* /* handler */) = 0;
};

class TGatewayServiceIfSingletonFactory : virtual public TGatewayServiceIfFactory {
 public:
  TGatewayServiceIfSingletonFactory(const boost::shared_ptr<TGatewayServiceIf>& iface) : iface_(iface) {}
  virtual ~TGatewayServiceIfSingletonFactory() {}

  virtual TGatewayServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(TGatewayServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<TGatewayServiceIf> iface_;
};

class TGatewayServiceNull : virtual public TGatewayServiceIf {
 public:
  virtual ~TGatewayServiceNull() {}
  void IncCounter(const std::string& /* RuleID */) {
    return;
  }
};


class TGatewayService_IncCounter_args {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  TGatewayService_IncCounter_args(const TGatewayService_IncCounter_args&);
  TGatewayService_IncCounter_args& operator=(const TGatewayService_IncCounter_args&);
  TGatewayService_IncCounter_args() : RuleID() {
  }

  virtual ~TGatewayService_IncCounter_args() throw();
  std::string RuleID;

  void __set_RuleID(const std::string& val);

  bool operator == (const TGatewayService_IncCounter_args & rhs) const
  {
    if (!(RuleID == rhs.RuleID))
      return false;
    return true;
  }
  bool operator != (const TGatewayService_IncCounter_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TGatewayService_IncCounter_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const TGatewayService_IncCounter_args& obj);
};


class TGatewayService_IncCounter_pargs {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};


  virtual ~TGatewayService_IncCounter_pargs() throw();
  const std::string* RuleID;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const TGatewayService_IncCounter_pargs& obj);
};


class TGatewayService_IncCounter_result {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  TGatewayService_IncCounter_result(const TGatewayService_IncCounter_result&);
  TGatewayService_IncCounter_result& operator=(const TGatewayService_IncCounter_result&);
  TGatewayService_IncCounter_result() {
  }

  virtual ~TGatewayService_IncCounter_result() throw();

  bool operator == (const TGatewayService_IncCounter_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const TGatewayService_IncCounter_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TGatewayService_IncCounter_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const TGatewayService_IncCounter_result& obj);
};


class TGatewayService_IncCounter_presult {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~TGatewayService_IncCounter_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const TGatewayService_IncCounter_presult& obj);
};

class TGatewayServiceClient : virtual public TGatewayServiceIf {
 public:
  TGatewayServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  TGatewayServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void IncCounter(const std::string& RuleID);
  void send_IncCounter(const std::string& RuleID);
  void recv_IncCounter();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class TGatewayServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<TGatewayServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (TGatewayServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_IncCounter(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  TGatewayServiceProcessor(boost::shared_ptr<TGatewayServiceIf> iface) :
    iface_(iface) {
    processMap_["IncCounter"] = &TGatewayServiceProcessor::process_IncCounter;
  }

  virtual ~TGatewayServiceProcessor() {}
};

class TGatewayServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  TGatewayServiceProcessorFactory(const ::boost::shared_ptr< TGatewayServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< TGatewayServiceIfFactory > handlerFactory_;
};

class TGatewayServiceMultiface : virtual public TGatewayServiceIf {
 public:
  TGatewayServiceMultiface(std::vector<boost::shared_ptr<TGatewayServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~TGatewayServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<TGatewayServiceIf> > ifaces_;
  TGatewayServiceMultiface() {}
  void add(boost::shared_ptr<TGatewayServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void IncCounter(const std::string& RuleID) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->IncCounter(RuleID);
    }
    ifaces_[i]->IncCounter(RuleID);
  }

};

} // namespace

#endif
