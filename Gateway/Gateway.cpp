// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "TGatewayService.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/server/TThreadedServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

#include "TGatewayServiceHandler.h"

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

int main(int argc, char **argv) {
  int port = 9091;

  boost::shared_ptr<TGatewayServiceHandler> handler(new TGatewayServiceHandler());
  boost::shared_ptr<TProcessor> processor(new TGatewayServiceProcessor(handler));
  boost::shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  boost::shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  boost::shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TThreadedServer server(processor, serverTransport, transportFactory, protocolFactory);
  
  if (handler->Init(argc, argv) != true) {
	  return -1;
  }

  try
  {
	  server.serve();
  }
  catch (TException& tx) {
	  cout << "ERROR: " << tx.what() << endl;
  }

  return 0;
}

